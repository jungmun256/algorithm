.isdecimal() -> 0-9인지 확인
.isdigit() -> 숫자형태

a = [list(map(int,input().split())) for _ in range(n)]

if all():  -> 모든 조건이 참일 경우

s[i:i+2].isalpha() -> 문자열 중 2문자씩 , 문자로 되어있는지 확인


import math
math.floor() :  소수점 아래 버리기

탐색 -> DFS / BFS -> 자료구조 (스택, 큐, 재귀함수)
스택 - 리스트 이용 , append(), pop()
큐 - deque 라이브러리 사용, append(), popleft(), list(queue) : 리스트 자료형으로 반환
재귀함수 - 종료 조건 꼭 명시


from fractions import gcd
from math import gcd

제곱근 
n ** (1/2)


정렬 반대로
a.sort(reverse=True)


list(map(int,str(n)))


sorted(정렬할 문자열, key = lambda x:x[n])

calendear함수
import calendear
week_list = ['MON','TUE','WED','THU','FRI','SAT','SUN']
week_list[calendear.weekday(2016,5,24)]

3진법 변환
def solution(n,q):
    rev_base = ''
    while n > 0:
        n, mod = divmod(n,q)
        rev_base += str(mod)
    return rev_base[::-1]


n 진수로 바꾸기
int(바꿀 숫자, n진수)

str(bin(i|j))[2:]


ord(문자)
 ord('a') -> 정수 97 반환
chr(정수)
 chr(97) -> 문자 'a' 반환


에라토스테네스의 체
1. 2부터 N까지의 모든 자연수를 나열한다.
2. 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다.
3. 남은 수 중에서 i의 배수를 모두 제거한다. (i는 제거하지 않는다.)
4. 더 이상 반복할 수 없을 때까지 2번과 3번의 과정을 반복한다.

피보나치 (런타임 오류 나지 않기 위해)

def solution(n):
    answer = [0 for _ in range(n+1)]
    answer[1] = 1

    for i in range(2,n+1):
        answer[i] = (answer[i-1] + answer[i-2]) % 1234567
                                          # 피보나치 수가 n에 따라서 점점 많이 커지기 때문에 표현할 수 있는 범위를 넘어갈 수 있기 때문이다.
    return answer[i]




데크(deque) ? 
- 양방향 큐
- 앞, 뒤 양쪽 방향에서 엘리먼트(element)를 추가하거나 제거할 수 있다.
- O(1)로 접근 가능
- deque.rotate(num): 데크를 num만큼 회전한다(양수면 오른쪽, 음수면 왼쪽).

from collections import deque

q = deque()
q.appendleft(10)
q.append(0)
q.popleft()
q.pop()



문자열 s를 왼쪽으로 x칸만큼 회전
temp = list(s)
temp.append(temp.pop(0))



math.floor(len(inter)/len(uni)*65536)



product
데카르트 곱이라고도 하는 cartesian product를 표현할 때 사용하는 메소드이다(DB의 join, 관계 대수의 product를 생각하면 된다). 이 메소드의 특징은 두 개 이상의 리스트의 모든 조합을 구할 때 사용된다.

from itertools import product

_list = ["012", "abc", "!@#"]
pd = list(product(*_list))
# [('0', 'a', '!'), ('0', 'a', '@'), ('0', 'b', '!'), ('0', 'b', '@'), ('1', 'a', '!'), ('1', 'a', '@'), ('1', 'b', '!'), ('1', 'b', '@')]


heapq